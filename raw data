import pandas as pd
from sklearn.preprocessing import StandardScaler, RobustScaler, OrdinalEncoder
from sklearn.impute import SimpleImputer
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.preprocessing import PolynomialFeatures
from sklearn.feature_extraction.text import TfidfVectorizer

def load_data(file_path):
    """
    Load data from CSV file.

    Parameters:
    file_path (str): Path to the CSV file.

    Returns:
    pd.DataFrame: Loaded DataFrame.
    """
    return pd.read_csv(file_path)

def preprocess_data(data, numeric_features, categorical_features, target_column):
    """
    Preprocess the raw data.

    Parameters:
    data (pd.DataFrame): Input DataFrame.
    numeric_features (list): List of numeric feature column names.
    categorical_features (list): List of categorical feature column names.
    target_column (str): Name of the target column.

    Returns:
    pd.DataFrame: Preprocessed DataFrame.
    pd.Series: Target variable.
    """
    # Separate features and target variable
    X = data.drop(columns=[target_column])
    y = data[target_column]
    
    # Define preprocessing steps
    numeric_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='median')),
        ('scaler', StandardScaler())])
    
    categorical_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
        ('encoder', OrdinalEncoder())])
    
    text_transformer = Pipeline(steps=[
        ('imputer', SimpleImputer(strategy='constant', fill_value='')),
        ('tfidf', TfidfVectorizer())])
    
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', numeric_transformer, numeric_features),
            ('cat', categorical_transformer, categorical_features),
            ('text', text_transformer, 'text_column')])
    
    # Apply preprocessing
    preprocessed_data = preprocessor.fit_transform(X)
    
    return preprocessed_data, y

def feature_selection(X, y, num_features):
    """
    Perform feature selection using SelectKBest.

    Parameters:
    X (pd.DataFrame): Input features.
    y (pd.Series): Target variable.
    num_features (int): Number of top features to select.

    Returns:
    pd.DataFrame: Selected features.
    """
    selector = SelectKBest(score_func=f_classif, k=num_features)
    X_selected = selector.fit_transform(X, y)
    return X_selected

def polynomial_features(X, degree):
    """
    Generate polynomial features.

    Parameters:
    X (pd.DataFrame): Input features.
    degree (int): Degree of polynomial features.

    Returns:
    pd.DataFrame: Transformed features with polynomial features.
    """
    poly = PolynomialFeatures(degree=degree, include_bias=False)
    X_poly = poly.fit_transform(X)
    return X_poly
